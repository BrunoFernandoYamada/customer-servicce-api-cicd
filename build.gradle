//import com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
	repositories {
		jcenter()
		mavenCentral()
		maven { url 'https://plugins.gradle.org/m2/' }
	}
	dependencies {
		//[KAFKA - AVRO] [step 1] plugin needed to generate POJO from Avro schema
		classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.16.0"
	}
}

plugins {
	id 'org.springframework.boot' version '2.6.2'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

//[KAFKA - AVRO] [step 2] dont forget to add plugin
apply plugin: "com.commercehub.gradle.plugin.avro"


group = 'br.com.byamada'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	jcenter()
	mavenCentral()
	maven { url "https://repo.spring.io/snapshot" }
	maven { url "https://repo.spring.io/milestone" }
	maven { url "https://packages.confluent.io/maven/" }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation group: 'com.h2database', name: 'h2'

	//[FLYWAY] [step 1] adicionar a lib flyway
	implementation 'org.flywaydb:flyway-core'

	//[METRICS] [step 1] adicionar a lib para prometheus
	implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.8.1'

	//[MAPEAMENTO] [step 1] adicionar as libs MapStruct
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

	//[SLACK] [step 1] incluir lib jslack, httpclient e httpmime
	implementation group: 'com.github.seratch', name: 'jslack', version: '3.4.2'
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
	implementation group: 'org.apache.httpcomponents', name: 'httpmime', version: '4.5.13'

	//[KAFKA - AVRO] [step 3] adding kafka libs and avro]
	implementation 'org.springframework.kafka:spring-kafka'
	implementation("io.confluent:kafka-schema-registry:4.1.0") {
		exclude group: 'org.slf4j'
	}
	implementation("org.apache.kafka:kafka-streams:2.0.1") {
		exclude group: 'org.slf4j'
	}
	implementation group: 'org.apache.avro', name: 'avro', version: '1.10.1'
	implementation group: 'io.confluent', name: 'kafka-avro-serializer', version: '5.3.0'
	implementation("io.confluent:kafka-streams-avro-serde:5.2.1") {
		exclude group: 'org.slf4j'
	}

	//[FEIGN CLIENT] [STEP 2] adding Feign Client libs
	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.1'
	implementation group: 'io.github.openfeign', name: 'feign-okhttp', version: '11.0'
	implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '11.0'

	//[SPRING SLEUTH] [Step 1] adding Sleuth lib
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth', version: '3.1.1'



}

//[KAFKA - AVRO] [step 4] gradle-avro-plugin setting and method to generete avro from gradew
avro {
	createSetters = false
	fieldVisibility = "PRIVATE"
}

generateAvroJava {
	//point plugin to folder with avro schemas
	source("src/main/resources/avro")
	//point plugin to folder with generated POJOs
	outputDir = file("src/main/java")
}

/* Using cleaner model for the generation method above

task ("generateProtocol", type: GenerateAvroJavaTask) {
	enabled = true
	source file("src/main/resources/avro")
	outputDir = file("src/main/java/")
}
*/


test {
	useJUnitPlatform()
}
